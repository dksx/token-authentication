package com.server.application.controller;

import javax.inject.Inject;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Map;

import com.server.application.entity.PublicKeyEntity;
import com.server.application.service.ApplicationService;
import org.javatuples.Pair;
import org.jose4j.lang.JoseException;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin("*")
public class ApplicationController {

    private ApplicationService service;

    @Inject
    public ApplicationController(ApplicationService service) {
        this.service = service;
    }

    @RequestMapping("/")
    public String index() {
        return "";
    }

    /**
     * Returns the public key which is generated by the exponent and modulus of a JWKS uri.
     * See https://datatracker.ietf.org/doc/html/rfc7517
     */
    @PostMapping(path = "/generate-key", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
    public String generateKey(@RequestBody PublicKeyEntity key) throws InvalidKeySpecException, NoSuchAlgorithmException {
        String publicKey = service.generateKey(key.getKeyExponent(), key.getKeyModulus());
        return "-----BEGIN PUBLIC KEY-----\n" + publicKey + "\n-----END PUBLIC KEY-----";
    }

    /**
     * Returns the result of a bearer token validation attempt. The token is validated against the provided public key.
     */
    @PostMapping(path = "/validate", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
    public String validateBearerToken(@RequestBody Map<String, String> payload) throws InvalidKeySpecException, NoSuchAlgorithmException {
        //payload.forEach((k,v) -> System.out.println("Key = " + k + ", Value = " + v));
        String response = service.validateBearerToken(payload.get("public_key"), payload.get("token"));
        return response;
    }

    /**
     * Returns a signed token generated on behalf of the username provided (username part of a token claim),
     * as well as the public key that may validate the token.
     */
    @PostMapping(path = "/generate-token", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
    public String generateSignedToken(@RequestBody Map<String, String> payload) throws JoseException, NoSuchAlgorithmException {
        Pair pair = service.generateSignedToken(payload.get("user"));
        String response = "Token:\n" + pair.getValue0() +
                "\n\nPublic Key:\n-----BEGIN PUBLIC KEY-----\n" + pair.getValue1() + "\n-----END PUBLIC KEY-----";
        return response;
    }
}
